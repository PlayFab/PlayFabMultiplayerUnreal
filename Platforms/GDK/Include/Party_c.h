#pragma once

#include <PartyTypes.h>

#ifdef __cplusplus
extern "C"
{
#endif

#define PARTY_API __stdcall
#define PARTY_API_ATTRIBUTES

typedef const struct PARTY_LOCAL_USER* PARTY_LOCAL_USER_HANDLE;
typedef const struct PARTY_ENDPOINT* PARTY_ENDPOINT_HANDLE;
typedef const struct PARTY_DEVICE* PARTY_DEVICE_HANDLE;
typedef const struct PARTY_INVITATION* PARTY_INVITATION_HANDLE;
typedef const struct PARTY_NETWORK* PARTY_NETWORK_HANDLE;
typedef const struct PARTY_CHAT_CONTROL* PARTY_CHAT_CONTROL_HANDLE;
typedef const struct PARTY_AUDIO_MANIPULATION_SOURCE_STREAM* PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE;
typedef const struct PARTY_AUDIO_MANIPULATION_SINK_STREAM* PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE;
typedef const struct PARTY_TEXT_TO_SPEECH_PROFILE* PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE;
typedef const struct PARTY* PARTY_HANDLE;
typedef uint32_t PARTY_MEMORY_TYPE;

typedef
_Ret_maybenull_
_Post_writable_byte_size_(size) void*
(PARTY_API* PARTY_MEM_ALLOC_FUNC)(
    size_t size,
    PARTY_MEMORY_TYPE memoryType
    );

typedef
void
(PARTY_API* PARTY_MEM_FREE_FUNC)(
    _Post_invalid_ void* pointer,
    PARTY_MEMORY_TYPE memoryType
    );

#pragma pack(push, 8)

// BEGIN GENERATED SECTION: DO NOT EDIT

#define PARTY_MAX_NETWORK_CONFIGURATION_MAX_DEVICE_COUNT 32
#define PARTY_MAX_DIRECT_PEER_CONNECTIONS_PER_DEVICE 7
#define PARTY_MAX_NETWORK_CONFIGURATION_MAX_ENDPOINTS_PER_DEVICE_COUNT 32
#define PARTY_MAX_LOCAL_USERS_PER_DEVICE_COUNT 8
#define PARTY_OPAQUE_CONNECTION_INFORMATION_BYTE_COUNT 300
#define PARTY_MAX_INVITATION_IDENTIFIER_STRING_LENGTH 127
#define PARTY_MAX_INVITATION_ENTITY_ID_COUNT 1024
#define PARTY_MAX_ENTITY_ID_STRING_LENGTH 20
#define PARTY_NETWORK_IDENTIFIER_STRING_LENGTH 36
#define PARTY_MAX_REGION_NAME_STRING_LENGTH 19
#define PARTY_MAX_SERIALIZED_NETWORK_DESCRIPTOR_STRING_LENGTH 448
#define PARTY_MAX_AUDIO_DEVICE_IDENTIFIER_STRING_LENGTH 999
#define PARTY_MAX_LANGUAGE_CODE_STRING_LENGTH 84
#define PARTY_MAX_CHAT_TEXT_MESSAGE_STRING_LENGTH 1023
#define PARTY_MAX_CHAT_TRANSCRIPTION_MESSAGE_STRING_LENGTH 1023
#define PARTY_MAX_TEXT_TO_SPEECH_PROFILE_IDENTIFIER_STRING_LENGTH 255
#define PARTY_MAX_TEXT_TO_SPEECH_PROFILE_NAME_STRING_LENGTH 127
#define PARTY_MAX_TEXT_TO_SPEECH_INPUT_STRING_LENGTH 1023
#define PARTY_ANY_PROCESSOR 0xffffffffffffffff
#define PARTY_MIN_SEND_MESSAGE_QUEUING_PRIORITY -5
#define PARTY_CHAT_SEND_MESSAGE_QUEUING_PRIORITY -3
#define PARTY_DEFAULT_SEND_MESSAGE_QUEUING_PRIORITY 0
#define PARTY_MAX_SEND_MESSAGE_QUEUING_PRIORITY 5

typedef enum PARTY_STATE_CHANGE_TYPE
{
    PARTY_STATE_CHANGE_TYPE_REGIONS_CHANGED = 0,
    PARTY_STATE_CHANGE_TYPE_DESTROY_LOCAL_USER_COMPLETED = 1,
    PARTY_STATE_CHANGE_TYPE_CREATE_NEW_NETWORK_COMPLETED = 2,
    PARTY_STATE_CHANGE_TYPE_CONNECT_TO_NETWORK_COMPLETED = 3,
    PARTY_STATE_CHANGE_TYPE_AUTHENTICATE_LOCAL_USER_COMPLETED = 4,
    PARTY_STATE_CHANGE_TYPE_NETWORK_CONFIGURATION_MADE_AVAILABLE = 5,
    PARTY_STATE_CHANGE_TYPE_NETWORK_DESCRIPTOR_CHANGED = 6,
    PARTY_STATE_CHANGE_TYPE_LOCAL_USER_REMOVED = 7,
    PARTY_STATE_CHANGE_TYPE_REMOVE_LOCAL_USER_COMPLETED = 8,
    PARTY_STATE_CHANGE_TYPE_LOCAL_USER_KICKED = 9,
    PARTY_STATE_CHANGE_TYPE_CREATE_ENDPOINT_COMPLETED = 10,
    PARTY_STATE_CHANGE_TYPE_DESTROY_ENDPOINT_COMPLETED = 11,
    PARTY_STATE_CHANGE_TYPE_ENDPOINT_CREATED = 12,
    PARTY_STATE_CHANGE_TYPE_ENDPOINT_DESTROYED = 13,
    PARTY_STATE_CHANGE_TYPE_REMOTE_DEVICE_CREATED = 14,
    PARTY_STATE_CHANGE_TYPE_REMOTE_DEVICE_DESTROYED = 15,
    PARTY_STATE_CHANGE_TYPE_REMOTE_DEVICE_JOINED_NETWORK = 16,
    PARTY_STATE_CHANGE_TYPE_REMOTE_DEVICE_LEFT_NETWORK = 17,
    PARTY_STATE_CHANGE_TYPE_DEVICE_PROPERTIES_CHANGED = 18,
    PARTY_STATE_CHANGE_TYPE_LEAVE_NETWORK_COMPLETED = 19,
    PARTY_STATE_CHANGE_TYPE_NETWORK_DESTROYED = 20,
    PARTY_STATE_CHANGE_TYPE_ENDPOINT_MESSAGE_RECEIVED = 21,
    PARTY_STATE_CHANGE_TYPE_DATA_BUFFERS_RETURNED = 22,
    PARTY_STATE_CHANGE_TYPE_ENDPOINT_PROPERTIES_CHANGED = 23,
    PARTY_STATE_CHANGE_TYPE_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_COMPLETED = 26,
    PARTY_STATE_CHANGE_TYPE_NETWORK_PROPERTIES_CHANGED = 27,
    PARTY_STATE_CHANGE_TYPE_KICK_DEVICE_COMPLETED = 28,
    PARTY_STATE_CHANGE_TYPE_KICK_USER_COMPLETED = 29,
    PARTY_STATE_CHANGE_TYPE_CREATE_CHAT_CONTROL_COMPLETED = 31,
    PARTY_STATE_CHANGE_TYPE_DESTROY_CHAT_CONTROL_COMPLETED = 32,
    PARTY_STATE_CHANGE_TYPE_CHAT_CONTROL_CREATED = 33,
    PARTY_STATE_CHANGE_TYPE_CHAT_CONTROL_DESTROYED = 34,
    PARTY_STATE_CHANGE_TYPE_SET_CHAT_AUDIO_ENCODER_BITRATE_COMPLETED = 35,
    PARTY_STATE_CHANGE_TYPE_CHAT_TEXT_RECEIVED = 36,
    PARTY_STATE_CHANGE_TYPE_VOICE_CHAT_TRANSCRIPTION_RECEIVED = 37,
    PARTY_STATE_CHANGE_TYPE_SET_CHAT_AUDIO_INPUT_COMPLETED = 38,
    PARTY_STATE_CHANGE_TYPE_SET_CHAT_AUDIO_OUTPUT_COMPLETED = 39,
    PARTY_STATE_CHANGE_TYPE_LOCAL_CHAT_AUDIO_INPUT_CHANGED = 40,
    PARTY_STATE_CHANGE_TYPE_LOCAL_CHAT_AUDIO_OUTPUT_CHANGED = 41,
    PARTY_STATE_CHANGE_TYPE_SET_TEXT_TO_SPEECH_PROFILE_COMPLETED = 42,
    PARTY_STATE_CHANGE_TYPE_SYNTHESIZE_TEXT_TO_SPEECH_COMPLETED = 43,
    PARTY_STATE_CHANGE_TYPE_CHAT_CONTROL_PROPERTIES_CHANGED = 45,
    PARTY_STATE_CHANGE_TYPE_CHAT_CONTROL_JOINED_NETWORK = 46,
    PARTY_STATE_CHANGE_TYPE_CHAT_CONTROL_LEFT_NETWORK = 47,
    PARTY_STATE_CHANGE_TYPE_CONNECT_CHAT_CONTROL_COMPLETED = 48,
    PARTY_STATE_CHANGE_TYPE_DISCONNECT_CHAT_CONTROL_COMPLETED = 49,
    PARTY_STATE_CHANGE_TYPE_POPULATE_AVAILABLE_TEXT_TO_SPEECH_PROFILES_COMPLETED = 50,
    PARTY_STATE_CHANGE_TYPE_CREATE_INVITATION_COMPLETED = 51,
    PARTY_STATE_CHANGE_TYPE_REVOKE_INVITATION_COMPLETED = 52,
    PARTY_STATE_CHANGE_TYPE_INVITATION_CREATED = 53,
    PARTY_STATE_CHANGE_TYPE_INVITATION_DESTROYED = 54,
    PARTY_STATE_CHANGE_TYPE_SET_LANGUAGE_COMPLETED = 55,
    PARTY_STATE_CHANGE_TYPE_SET_TRANSCRIPTION_OPTIONS_COMPLETED = 56,
    PARTY_STATE_CHANGE_TYPE_SET_TEXT_CHAT_OPTIONS_COMPLETED = 57,
    PARTY_STATE_CHANGE_TYPE_CONFIGURE_AUDIO_MANIPULATION_VOICE_STREAM_COMPLETED = 58,
    PARTY_STATE_CHANGE_TYPE_CONFIGURE_AUDIO_MANIPULATION_CAPTURE_STREAM_COMPLETED = 59,
    PARTY_STATE_CHANGE_TYPE_CONFIGURE_AUDIO_MANIPULATION_RENDER_STREAM_COMPLETED = 60,
} PARTY_STATE_CHANGE_TYPE;

typedef enum PARTY_STATE_CHANGE_RESULT
{
    PARTY_STATE_CHANGE_RESULT_SUCCEEDED = 0,
    PARTY_STATE_CHANGE_RESULT_UNKNOWN_ERROR = 1,
    PARTY_STATE_CHANGE_RESULT_CANCELED_BY_TITLE = 2,
    PARTY_STATE_CHANGE_RESULT_INTERNET_CONNECTIVITY_ERROR = 3,
    PARTY_STATE_CHANGE_RESULT_PARTY_SERVICE_ERROR = 4,
    PARTY_STATE_CHANGE_RESULT_NO_SERVERS_AVAILABLE = 5,
    PARTY_STATE_CHANGE_RESULT_USER_NOT_AUTHORIZED = 6,
    PARTY_STATE_CHANGE_RESULT_USER_CREATE_NETWORK_THROTTLED = 7,
    PARTY_STATE_CHANGE_RESULT_TITLE_NOT_ENABLED_FOR_PARTY = 8,
    PARTY_STATE_CHANGE_RESULT_NETWORK_LIMIT_REACHED = 10,
    PARTY_STATE_CHANGE_RESULT_NETWORK_NO_LONGER_EXISTS = 11,
    PARTY_STATE_CHANGE_RESULT_NETWORK_NOT_JOINABLE = 12,
    PARTY_STATE_CHANGE_RESULT_VERSION_MISMATCH = 13,
    PARTY_STATE_CHANGE_RESULT_LEAVE_NETWORK_CALLED = 14,
    PARTY_STATE_CHANGE_RESULT_FAILED_TO_BIND_TO_LOCAL_UDP_SOCKET = 15,
} PARTY_STATE_CHANGE_RESULT;

typedef enum PARTY_LOCAL_USER_REMOVED_REASON
{
    PARTY_LOCAL_USER_REMOVED_REASON_AUTHENTICATION_FAILED = 0,
    PARTY_LOCAL_USER_REMOVED_REASON_REMOVE_LOCAL_USER = 1,
    PARTY_LOCAL_USER_REMOVED_REASON_DESTROY_LOCAL_USER = 2,
    PARTY_LOCAL_USER_REMOVED_REASON_DESTROY_NETWORK = 3,
} PARTY_LOCAL_USER_REMOVED_REASON;

typedef enum PARTY_DESTROYED_REASON
{
    PARTY_DESTROYED_REASON_REQUESTED = 0,
    PARTY_DESTROYED_REASON_DISCONNECTED = 1,
    PARTY_DESTROYED_REASON_KICKED = 2,
    PARTY_DESTROYED_REASON_DEVICE_LOST_AUTHENTICATION = 3,
    PARTY_DESTROYED_REASON_CREATION_FAILED = 4,
} PARTY_DESTROYED_REASON;

typedef enum PARTY_TEXT_CHAT_FILTER_LEVEL
{
    PARTY_TEXT_CHAT_FILTER_LEVEL_FAMILY_FRIENDLY = 0,
    PARTY_TEXT_CHAT_FILTER_LEVEL_MEDIUM = 1,
    PARTY_TEXT_CHAT_FILTER_LEVEL_MATURE = 2,
} PARTY_TEXT_CHAT_FILTER_LEVEL;

typedef enum PARTY_OPTION
{
    PARTY_OPTION_LOCAL_UDP_SOCKET_BIND_ADDRESS = 0,
    PARTY_OPTION_LOCAL_DEVICE_DIRECT_PEER_CONNECTIVITY_OPTIONS_MASK = 1,
    PARTY_OPTION_TEXT_CHAT_FILTER_LEVEL = 2,
    PARTY_OPTION_LOCAL_DEVICE_MAX_DIRECT_PEER_CONNECTIONS = 3,
} PARTY_OPTION;

typedef enum PARTY_THREAD_ID
{
    PARTY_THREAD_ID_AUDIO = 0,
    PARTY_THREAD_ID_NETWORKING = 1,
} PARTY_THREAD_ID;

typedef enum PARTY_WORK_MODE
{
    PARTY_WORK_MODE_AUTOMATIC = 0,
    PARTY_WORK_MODE_MANUAL = 1,
} PARTY_WORK_MODE;

typedef enum PARTY_SEND_MESSAGE_OPTIONS
{
    PARTY_SEND_MESSAGE_OPTIONS_DEFAULT = 0x0000,
    PARTY_SEND_MESSAGE_OPTIONS_GUARANTEED_DELIVERY = 0x0001,
    PARTY_SEND_MESSAGE_OPTIONS_BEST_EFFORT_DELIVERY = 0x0000,
    PARTY_SEND_MESSAGE_OPTIONS_SEQUENTIAL_DELIVERY = 0x0002,
    PARTY_SEND_MESSAGE_OPTIONS_NONSEQUENTIAL_DELIVERY = 0x0000,
    PARTY_SEND_MESSAGE_OPTIONS_COPY_DATA_BUFFERS = 0x0000,
    PARTY_SEND_MESSAGE_OPTIONS_DONT_COPY_DATA_BUFFERS = 0x0004,
    PARTY_SEND_MESSAGE_OPTIONS_COALESCE_OPPORTUNISTICALLY = 0x0000,
    PARTY_SEND_MESSAGE_OPTIONS_ALWAYS_COALESCE_UNTIL_FLUSHED = 0x0008,
    PARTY_SEND_MESSAGE_OPTIONS_REQUIRE_TIMELY_ACKNOWLEDGEMENT = 0x0000,
    PARTY_SEND_MESSAGE_OPTIONS_ALLOW_LAZY_ACKNOWLEDGEMENT = 0x0010,
} PARTY_SEND_MESSAGE_OPTIONS;

typedef enum PARTY_MESSAGE_RECEIVED_OPTIONS
{
    PARTY_MESSAGE_RECEIVED_OPTIONS_NONE = 0x0000,
    PARTY_MESSAGE_RECEIVED_OPTIONS_GUARANTEED_DELIVERY = 0x0001,
    PARTY_MESSAGE_RECEIVED_OPTIONS_SEQUENTIAL_DELIVERY = 0x0002,
    PARTY_MESSAGE_RECEIVED_OPTIONS_REQUIRED_FRAGMENTATION = 0x0004,
} PARTY_MESSAGE_RECEIVED_OPTIONS;

typedef enum PARTY_CANCEL_MESSAGES_FILTER_EXPRESSION
{
    PARTY_CANCEL_MESSAGES_FILTER_EXPRESSION_NONE = 0,
    PARTY_CANCEL_MESSAGES_FILTER_EXPRESSION_IDENTITY_AND_MASK_EQUALS_MATCH_VALUE = 1,
    PARTY_CANCEL_MESSAGES_FILTER_EXPRESSION_IDENTITY_AND_MASK_DOES_NOT_EQUAL_MATCH_VALUE = 2,
} PARTY_CANCEL_MESSAGES_FILTER_EXPRESSION;

typedef enum PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_OPTIONS
{
    PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_OPTIONS_NONE = 0x0000,
    PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_OPTIONS_SYNCHRONIZE_MESSAGES_WITH_SHARED_PROPERTIES = 0x0001,
} PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_OPTIONS;

typedef enum PARTY_NETWORK_STATISTIC
{
    PARTY_NETWORK_STATISTIC_AVERAGE_RELAY_SERVER_ROUND_TRIP_LATENCY_IN_MILLISECONDS = 0,
    PARTY_NETWORK_STATISTIC_SENT_PROTOCOL_PACKETS = 1,
    PARTY_NETWORK_STATISTIC_SENT_PROTOCOL_BYTES = 2,
    PARTY_NETWORK_STATISTIC_RETRIED_PROTOCOL_PACKETS = 3,
    PARTY_NETWORK_STATISTIC_RETRIED_PROTOCOL_BYTES = 4,
    PARTY_NETWORK_STATISTIC_DROPPED_PROTOCOL_PACKETS = 5,
    PARTY_NETWORK_STATISTIC_RECEIVED_PROTOCOL_PACKETS = 6,
    PARTY_NETWORK_STATISTIC_RECEIVED_PROTOCOL_BYTES = 7,
    PARTY_NETWORK_STATISTIC_CURRENTLY_QUEUED_SEND_MESSAGES = 8,
    PARTY_NETWORK_STATISTIC_CURRENTLY_QUEUED_SEND_MESSAGE_BYTES = 9,
    PARTY_NETWORK_STATISTIC_CURRENTLY_ACTIVE_SEND_MESSAGES = 10,
    PARTY_NETWORK_STATISTIC_CURRENTLY_ACTIVE_SEND_MESSAGE_BYTES = 11,
    PARTY_NETWORK_STATISTIC_TIMED_OUT_SEND_MESSAGES = 12,
    PARTY_NETWORK_STATISTIC_TIMED_OUT_SEND_MESSAGE_BYTES = 13,
    PARTY_NETWORK_STATISTIC_CANCELED_SEND_MESSAGES = 14,
    PARTY_NETWORK_STATISTIC_CANCELED_SEND_MESSAGE_BYTES = 15,
} PARTY_NETWORK_STATISTIC;

typedef enum PARTY_ENDPOINT_STATISTIC
{
    PARTY_ENDPOINT_STATISTIC_CURRENTLY_QUEUED_SEND_MESSAGES = 0,
    PARTY_ENDPOINT_STATISTIC_CURRENTLY_QUEUED_SEND_MESSAGE_BYTES = 1,
    PARTY_ENDPOINT_STATISTIC_CURRENTLY_ACTIVE_SEND_MESSAGES = 2,
    PARTY_ENDPOINT_STATISTIC_CURRENTLY_ACTIVE_SEND_MESSAGE_BYTES = 3,
    PARTY_ENDPOINT_STATISTIC_TIMED_OUT_SEND_MESSAGES = 4,
    PARTY_ENDPOINT_STATISTIC_TIMED_OUT_SEND_MESSAGE_BYTES = 5,
    PARTY_ENDPOINT_STATISTIC_CANCELED_SEND_MESSAGES = 6,
    PARTY_ENDPOINT_STATISTIC_CANCELED_SEND_MESSAGE_BYTES = 7,
    PARTY_ENDPOINT_STATISTIC_AVERAGE_DEVICE_ROUND_TRIP_LATENCY_IN_MILLISECONDS = 8,
} PARTY_ENDPOINT_STATISTIC;

typedef enum PARTY_INVITATION_REVOCABILITY
{
    PARTY_INVITATION_REVOCABILITY_CREATOR = 0,
    PARTY_INVITATION_REVOCABILITY_ANYONE = 1,
} PARTY_INVITATION_REVOCABILITY;

typedef enum PARTY_CHAT_PERMISSION_OPTIONS
{
    PARTY_CHAT_PERMISSION_OPTIONS_NONE = 0x0000,
    PARTY_CHAT_PERMISSION_OPTIONS_SEND_MICROPHONE_AUDIO = 0x0001,
    PARTY_CHAT_PERMISSION_OPTIONS_SEND_TEXT_TO_SPEECH_AUDIO = 0x0002,
    PARTY_CHAT_PERMISSION_OPTIONS_SEND_AUDIO = 0x0003,
    PARTY_CHAT_PERMISSION_OPTIONS_RECEIVE_MICROPHONE_AUDIO = 0x0004,
    PARTY_CHAT_PERMISSION_OPTIONS_RECEIVE_TEXT_TO_SPEECH_AUDIO = 0x0008,
    PARTY_CHAT_PERMISSION_OPTIONS_RECEIVE_AUDIO = 0x000c,
    PARTY_CHAT_PERMISSION_OPTIONS_RECEIVE_TEXT = 0x0010,
} PARTY_CHAT_PERMISSION_OPTIONS;

typedef enum PARTY_AUDIO_DEVICE_SELECTION_TYPE
{
    PARTY_AUDIO_DEVICE_SELECTION_TYPE_NONE = 0,
    PARTY_AUDIO_DEVICE_SELECTION_TYPE_SYSTEM_DEFAULT = 1,
    PARTY_AUDIO_DEVICE_SELECTION_TYPE_PLATFORM_USER_DEFAULT = 2,
    PARTY_AUDIO_DEVICE_SELECTION_TYPE_MANUAL = 3,
} PARTY_AUDIO_DEVICE_SELECTION_TYPE;

typedef enum PARTY_AUDIO_INPUT_STATE
{
    PARTY_AUDIO_INPUT_STATE_NO_INPUT = 0,
    PARTY_AUDIO_INPUT_STATE_INITIALIZED = 1,
    PARTY_AUDIO_INPUT_STATE_NOT_FOUND = 2,
    PARTY_AUDIO_INPUT_STATE_USER_CONSENT_DENIED = 3,
    PARTY_AUDIO_INPUT_STATE_UNSUPPORTED_FORMAT = 4,
    PARTY_AUDIO_INPUT_STATE_ALREADY_IN_USE = 5,
    PARTY_AUDIO_INPUT_STATE_UNKNOWN_ERROR = 6,
} PARTY_AUDIO_INPUT_STATE;

typedef enum PARTY_AUDIO_OUTPUT_STATE
{
    PARTY_AUDIO_OUTPUT_STATE_NO_OUTPUT = 0,
    PARTY_AUDIO_OUTPUT_STATE_INITIALIZED = 1,
    PARTY_AUDIO_OUTPUT_STATE_NOT_FOUND = 2,
    PARTY_AUDIO_OUTPUT_STATE_UNSUPPORTED_FORMAT = 3,
    PARTY_AUDIO_OUTPUT_STATE_ALREADY_IN_USE = 4,
    PARTY_AUDIO_OUTPUT_STATE_UNKNOWN_ERROR = 5,
} PARTY_AUDIO_OUTPUT_STATE;

typedef enum PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR
{
    PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR_SILENT = 0,
    PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR_TALKING = 1,
    PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR_AUDIO_INPUT_MUTED = 2,
    PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR_NO_AUDIO_INPUT = 3,
} PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR;

typedef enum PARTY_CHAT_CONTROL_CHAT_INDICATOR
{
    PARTY_CHAT_CONTROL_CHAT_INDICATOR_SILENT = 0,
    PARTY_CHAT_CONTROL_CHAT_INDICATOR_TALKING = 1,
    PARTY_CHAT_CONTROL_CHAT_INDICATOR_INCOMING_VOICE_DISABLED = 2,
    PARTY_CHAT_CONTROL_CHAT_INDICATOR_INCOMING_COMMUNICATIONS_MUTED = 3,
    PARTY_CHAT_CONTROL_CHAT_INDICATOR_NO_REMOTE_INPUT = 4,
    PARTY_CHAT_CONTROL_CHAT_INDICATOR_REMOTE_AUDIO_INPUT_MUTED = 5,
} PARTY_CHAT_CONTROL_CHAT_INDICATOR;

typedef enum PARTY_GENDER
{
    PARTY_GENDER_NEUTRAL = 0,
    PARTY_GENDER_FEMALE = 1,
    PARTY_GENDER_MALE = 2,
} PARTY_GENDER;

typedef enum PARTY_AUDIO_SOURCE_TYPE
{
    PARTY_AUDIO_SOURCE_TYPE_MICROPHONE = 0,
    PARTY_AUDIO_SOURCE_TYPE_TEXT_TO_SPEECH = 1,
} PARTY_AUDIO_SOURCE_TYPE;

typedef enum PARTY_VOICE_CHAT_TRANSCRIPTION_PHRASE_TYPE
{
    PARTY_VOICE_CHAT_TRANSCRIPTION_PHRASE_TYPE_HYPOTHESIS = 0,
    PARTY_VOICE_CHAT_TRANSCRIPTION_PHRASE_TYPE_FINAL = 1,
} PARTY_VOICE_CHAT_TRANSCRIPTION_PHRASE_TYPE;

typedef enum PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS
{
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_NONE = 0x0000,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_TRANSCRIBE_SELF = 0x0001,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_TRANSCRIBE_OTHER_CHAT_CONTROLS_WITH_MATCHING_LANGUAGES = 0x0002,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_TRANSCRIBE_OTHER_CHAT_CONTROLS_WITH_NON_MATCHING_LANGUAGES = 0x0004,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_DISABLE_HYPOTHESIS_PHRASES = 0x0008,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_TRANSLATE_TO_LOCAL_LANGUAGE = 0x0010,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_DISABLE_PROFANITY_MASKING = 0x0020,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS_TRANSCRIBE_SELF_REGARDLESS_OF_NETWORK_STATE = 0x0040,
} PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS;

typedef enum PARTY_TEXT_CHAT_OPTIONS
{
    PARTY_TEXT_CHAT_OPTIONS_NONE = 0x0000,
    PARTY_TEXT_CHAT_OPTIONS_TRANSLATE_TO_LOCAL_LANGUAGE = 0x0001,
    PARTY_TEXT_CHAT_OPTIONS_FILTER_OFFENSIVE_TEXT = 0x0002,
} PARTY_TEXT_CHAT_OPTIONS;

typedef enum PARTY_TRANSLATION_RECEIVED_OPTIONS
{
    PARTY_TRANSLATION_RECEIVED_OPTIONS_NONE = 0x0000,
    PARTY_TRANSLATION_RECEIVED_OPTIONS_TRUNCATED = 0x0001,
} PARTY_TRANSLATION_RECEIVED_OPTIONS;

typedef enum PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE
{
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE_NARRATION = 0,
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE_VOICE_CHAT = 1,
} PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE;

typedef enum PARTY_AUDIO_SAMPLE_TYPE
{
    PARTY_AUDIO_SAMPLE_TYPE_INTEGER = 0,
    PARTY_AUDIO_SAMPLE_TYPE_FLOAT = 1,
} PARTY_AUDIO_SAMPLE_TYPE;

typedef enum PARTY_VOICE_AUDIO_OPTIONS
{
    PARTY_VOICE_AUDIO_OPTIONS_NONE = 0x0000,
    PARTY_VOICE_AUDIO_OPTIONS_NOISE_SUPPRESSION = 0x0001,
} PARTY_VOICE_AUDIO_OPTIONS;

typedef enum PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_OPTIONS
{
    PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_OPTIONS_NONE = 0x0000,
    PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_OPTIONS_EXCLUDE_GAME_CORE_PREFERRED_UDP_MULTIPLAYER_PORT = 0x0001,
} PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_OPTIONS;

typedef enum PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS
{
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_NONE = 0x0000,
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_SAME_PLATFORM_TYPE = 0x0001,
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_DIFFERENT_PLATFORM_TYPE = 0x0002,
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_ANY_PLATFORM_TYPE = 0x0003,
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_SAME_ENTITY_LOGIN_PROVIDER = 0x0004,
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_DIFFERENT_ENTITY_LOGIN_PROVIDER = 0x0008,
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS_ANY_ENTITY_LOGIN_PROVIDER = 0x000c,
} PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS;

typedef enum PARTY_DEVICE_CONNECTION_TYPE
{
    PARTY_DEVICE_CONNECTION_TYPE_RELAY_SERVER = 0,
    PARTY_DEVICE_CONNECTION_TYPE_DIRECT_PEER_CONNECTION = 1,
} PARTY_DEVICE_CONNECTION_TYPE;

typedef enum PARTY_CHAT_TEXT_RECEIVED_OPTIONS
{
    PARTY_CHAT_TEXT_RECEIVED_OPTIONS_NONE = 0x0000,
    PARTY_CHAT_TEXT_RECEIVED_OPTIONS_FILTERED_OFFENSIVE_TERMS = 0x0001,
    PARTY_CHAT_TEXT_RECEIVED_OPTIONS_FILTERED_ENTIRE_MESSAGE = 0x0002,
    PARTY_CHAT_TEXT_RECEIVED_OPTIONS_FILTERED_DUE_TO_ERROR = 0x0004,
} PARTY_CHAT_TEXT_RECEIVED_OPTIONS;

typedef struct PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_CONFIGURATION
{
    PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_OPTIONS options;
    uint16_t port;
} PARTY_LOCAL_UDP_SOCKET_BIND_ADDRESS_CONFIGURATION;

typedef struct PARTY_NETWORK_DESCRIPTOR
{
    char networkIdentifier[PARTY_NETWORK_IDENTIFIER_STRING_LENGTH + 1];
    char regionName[PARTY_MAX_REGION_NAME_STRING_LENGTH + 1];
    uint8_t opaqueConnectionInformation[PARTY_OPAQUE_CONNECTION_INFORMATION_BYTE_COUNT];
} PARTY_NETWORK_DESCRIPTOR;

typedef struct PARTY_NETWORK_CONFIGURATION
{
    uint32_t maxUserCount;
    _Field_range_(1, PARTY_MAX_NETWORK_CONFIGURATION_MAX_DEVICE_COUNT) uint32_t maxDeviceCount;
    _Field_range_(1, PARTY_MAX_LOCAL_USERS_PER_DEVICE_COUNT) uint32_t maxUsersPerDeviceCount;
    uint32_t maxDevicesPerUserCount;
    _Field_range_(0, PARTY_MAX_NETWORK_CONFIGURATION_MAX_ENDPOINTS_PER_DEVICE_COUNT) uint32_t maxEndpointsPerDeviceCount;
    PARTY_DIRECT_PEER_CONNECTIVITY_OPTIONS directPeerConnectivityOptions;
} PARTY_NETWORK_CONFIGURATION;

typedef struct PARTY_REGION
{
    char regionName[PARTY_MAX_REGION_NAME_STRING_LENGTH + 1];
    uint32_t roundTripLatencyInMilliseconds;
} PARTY_REGION;

typedef struct PARTY_INVITATION_CONFIGURATION
{
    _Maybenull_ PartyString identifier;
    PARTY_INVITATION_REVOCABILITY revocability;
    _Field_range_(0, PARTY_MAX_INVITATION_ENTITY_ID_COUNT) uint32_t entityIdCount;
    _Field_size_(entityIdCount) const PartyString* entityIds;
} PARTY_INVITATION_CONFIGURATION;

typedef struct PARTY_SEND_MESSAGE_QUEUING_CONFIGURATION
{
    _Field_range_(PARTY_MIN_SEND_MESSAGE_QUEUING_PRIORITY, PARTY_MAX_SEND_MESSAGE_QUEUING_PRIORITY) int8_t priority;
    uint32_t identityForCancelFilters;
    uint32_t timeoutInMilliseconds;
} PARTY_SEND_MESSAGE_QUEUING_CONFIGURATION;

typedef struct PARTY_DATA_BUFFER
{
    _Field_size_bytes_(bufferByteCount) const void* buffer;
    uint32_t bufferByteCount;
} PARTY_DATA_BUFFER;

typedef struct PARTY_MUTABLE_DATA_BUFFER
{
    _Field_size_bytes_(bufferByteCount) void* buffer;
    uint32_t bufferByteCount;
} PARTY_MUTABLE_DATA_BUFFER;

typedef struct PARTY_TRANSLATION
{
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PartyString languageCode;
    PARTY_TRANSLATION_RECEIVED_OPTIONS options;
    PartyString translation;
} PARTY_TRANSLATION;

typedef struct PARTY_AUDIO_FORMAT
{
    uint32_t samplesPerSecond;
    uint32_t channelMask;
    uint16_t channelCount;
    uint16_t bitsPerSample;
    PARTY_AUDIO_SAMPLE_TYPE sampleType;
    PartyBool interleaved;
} PARTY_AUDIO_FORMAT;

typedef struct PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_CONFIGURATION
{
    _Maybenull_ PARTY_AUDIO_FORMAT* format;
    uint32_t maxTotalAudioBufferSizeInMilliseconds;
} PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_CONFIGURATION;

typedef struct PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION
{
    _Maybenull_ PARTY_AUDIO_FORMAT* format;
    uint32_t maxTotalAudioBufferSizeInMilliseconds;
} PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION;

typedef struct PARTY_STATE_CHANGE
{
    uint32_t /* PARTY_STATE_CHANGE_TYPE */ stateChangeType;
} PARTY_STATE_CHANGE;

typedef struct PARTY_REGIONS_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
} PARTY_REGIONS_CHANGED_STATE_CHANGE;

typedef struct PARTY_CREATE_NEW_NETWORK_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_LOCAL_USER_HANDLE localUser;
    PARTY_NETWORK_CONFIGURATION networkConfiguration;
    uint32_t regionCount;
    const PARTY_REGION* regions;
    void* asyncIdentifier;
    PARTY_NETWORK_DESCRIPTOR networkDescriptor;
    PartyString appliedInitialInvitationIdentifier;
} PARTY_CREATE_NEW_NETWORK_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CONNECT_TO_NETWORK_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_DESCRIPTOR networkDescriptor;
    void* asyncIdentifier;
    PARTY_NETWORK_HANDLE network;
} PARTY_CONNECT_TO_NETWORK_COMPLETED_STATE_CHANGE;

typedef struct PARTY_AUTHENTICATE_LOCAL_USER_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_LOCAL_USER_HANDLE localUser;
    PartyString invitationIdentifier;
    void* asyncIdentifier;
} PARTY_AUTHENTICATE_LOCAL_USER_COMPLETED_STATE_CHANGE;

typedef struct PARTY_NETWORK_CONFIGURATION_MADE_AVAILABLE_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_NETWORK_CONFIGURATION* networkConfiguration;
} PARTY_NETWORK_CONFIGURATION_MADE_AVAILABLE_STATE_CHANGE;

typedef struct PARTY_NETWORK_DESCRIPTOR_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
} PARTY_NETWORK_DESCRIPTOR_CHANGED_STATE_CHANGE;

typedef struct PARTY_LOCAL_USER_REMOVED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_LOCAL_USER_HANDLE localUser;
    PARTY_LOCAL_USER_REMOVED_REASON removedReason;
} PARTY_LOCAL_USER_REMOVED_STATE_CHANGE;

typedef struct PARTY_REMOVE_LOCAL_USER_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_LOCAL_USER_HANDLE localUser;
    void* asyncIdentifier;
} PARTY_REMOVE_LOCAL_USER_COMPLETED_STATE_CHANGE;

typedef struct PARTY_DESTROY_LOCAL_USER_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_LOCAL_USER_HANDLE localUser;
    void* asyncIdentifier;
} PARTY_DESTROY_LOCAL_USER_COMPLETED_STATE_CHANGE;

typedef struct PARTY_LOCAL_USER_KICKED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_LOCAL_USER_HANDLE localUser;
} PARTY_LOCAL_USER_KICKED_STATE_CHANGE;

typedef struct PARTY_CREATE_ENDPOINT_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    _Maybenull_ PARTY_LOCAL_USER_HANDLE localUser;
    void* asyncIdentifier;
    PARTY_ENDPOINT_HANDLE localEndpoint;
} PARTY_CREATE_ENDPOINT_COMPLETED_STATE_CHANGE;

typedef struct PARTY_DESTROY_ENDPOINT_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_ENDPOINT_HANDLE localEndpoint;
    void* asyncIdentifier;
} PARTY_DESTROY_ENDPOINT_COMPLETED_STATE_CHANGE;

typedef struct PARTY_ENDPOINT_CREATED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_ENDPOINT_HANDLE endpoint;
} PARTY_ENDPOINT_CREATED_STATE_CHANGE;

typedef struct PARTY_ENDPOINT_DESTROYED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_ENDPOINT_HANDLE endpoint;
    PARTY_DESTROYED_REASON reason;
    PartyError errorDetail;
} PARTY_ENDPOINT_DESTROYED_STATE_CHANGE;

typedef struct PARTY_REMOTE_DEVICE_CREATED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DEVICE_HANDLE device;
} PARTY_REMOTE_DEVICE_CREATED_STATE_CHANGE;

typedef struct PARTY_REMOTE_DEVICE_DESTROYED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DEVICE_HANDLE device;
} PARTY_REMOTE_DEVICE_DESTROYED_STATE_CHANGE;

typedef struct PARTY_REMOTE_DEVICE_JOINED_NETWORK_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DEVICE_HANDLE device;
    PARTY_NETWORK_HANDLE network;
} PARTY_REMOTE_DEVICE_JOINED_NETWORK_STATE_CHANGE;

typedef struct PARTY_REMOTE_DEVICE_LEFT_NETWORK_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DESTROYED_REASON reason;
    PartyError errorDetail;
    PARTY_DEVICE_HANDLE device;
    PARTY_NETWORK_HANDLE network;
} PARTY_REMOTE_DEVICE_LEFT_NETWORK_STATE_CHANGE;

typedef struct PARTY_DEVICE_PROPERTIES_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DEVICE_HANDLE device;
    uint32_t propertyCount;
    _Field_size_(propertyCount) const PartyString* keys;
} PARTY_DEVICE_PROPERTIES_CHANGED_STATE_CHANGE;

typedef struct PARTY_LEAVE_NETWORK_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    void* asyncIdentifier;
} PARTY_LEAVE_NETWORK_COMPLETED_STATE_CHANGE;

typedef struct PARTY_NETWORK_DESTROYED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DESTROYED_REASON reason;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
} PARTY_NETWORK_DESTROYED_STATE_CHANGE;

typedef struct PARTY_ENDPOINT_MESSAGE_RECEIVED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_ENDPOINT_HANDLE senderEndpoint;
    uint32_t receiverEndpointCount;
    _Field_size_(receiverEndpointCount) PARTY_ENDPOINT_HANDLE* receiverEndpoints;
    PARTY_MESSAGE_RECEIVED_OPTIONS options;
    uint32_t messageSize;
    _Field_size_bytes_(messageSize) const void* messageBuffer;
} PARTY_ENDPOINT_MESSAGE_RECEIVED_STATE_CHANGE;

typedef struct PARTY_DATA_BUFFERS_RETURNED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_ENDPOINT_HANDLE localSenderEndpoint;
    uint32_t dataBufferCount;
    _Field_size_(dataBufferCount) const PARTY_DATA_BUFFER* dataBuffers;
    void* messageIdentifier;
} PARTY_DATA_BUFFERS_RETURNED_STATE_CHANGE;

typedef struct PARTY_ENDPOINT_PROPERTIES_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_ENDPOINT_HANDLE endpoint;
    uint32_t propertyCount;
    _Field_size_(propertyCount) const PartyString* keys;
} PARTY_ENDPOINT_PROPERTIES_CHANGED_STATE_CHANGE;

typedef struct PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    uint32_t endpointCount;
    _Field_size_(endpointCount) PARTY_ENDPOINT_HANDLE* endpoints;
    PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_OPTIONS options;
    void* asyncIdentifier;
} PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CREATE_INVITATION_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_LOCAL_USER_HANDLE localUser;
    void* asyncIdentifier;
    PARTY_INVITATION_HANDLE invitation;
} PARTY_CREATE_INVITATION_COMPLETED_STATE_CHANGE;

typedef struct PARTY_REVOKE_INVITATION_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_LOCAL_USER_HANDLE localUser;
    PARTY_INVITATION_HANDLE invitation;
    void* asyncIdentifier;
} PARTY_REVOKE_INVITATION_COMPLETED_STATE_CHANGE;

typedef struct PARTY_INVITATION_CREATED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_INVITATION_HANDLE invitation;
} PARTY_INVITATION_CREATED_STATE_CHANGE;

typedef struct PARTY_INVITATION_DESTROYED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_INVITATION_HANDLE invitation;
    PARTY_DESTROYED_REASON reason;
    PartyError errorDetail;
} PARTY_INVITATION_DESTROYED_STATE_CHANGE;

typedef struct PARTY_NETWORK_PROPERTIES_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    uint32_t propertyCount;
    _Field_size_(propertyCount) const PartyString* keys;
} PARTY_NETWORK_PROPERTIES_CHANGED_STATE_CHANGE;

typedef struct PARTY_KICK_DEVICE_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_DEVICE_HANDLE kickedDevice;
    void* asyncIdentifier;
} PARTY_KICK_DEVICE_COMPLETED_STATE_CHANGE;

typedef struct PARTY_KICK_USER_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PartyString kickedEntityId;
    void* asyncIdentifier;
} PARTY_KICK_USER_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CREATE_CHAT_CONTROL_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_DEVICE_HANDLE localDevice;
    PARTY_LOCAL_USER_HANDLE localUser;
    PartyString languageCode;
    void* asyncIdentifier;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
} PARTY_CREATE_CHAT_CONTROL_COMPLETED_STATE_CHANGE;

typedef struct PARTY_DESTROY_CHAT_CONTROL_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_DEVICE_HANDLE localDevice;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    void* asyncIdentifier;
} PARTY_DESTROY_CHAT_CONTROL_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CHAT_CONTROL_CREATED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_CHAT_CONTROL_HANDLE chatControl;
} PARTY_CHAT_CONTROL_CREATED_STATE_CHANGE;

typedef struct PARTY_CHAT_CONTROL_DESTROYED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_CHAT_CONTROL_HANDLE chatControl;
    PARTY_DESTROYED_REASON reason;
    PartyError errorDetail;
} PARTY_CHAT_CONTROL_DESTROYED_STATE_CHANGE;

typedef struct PARTY_SET_CHAT_AUDIO_ENCODER_BITRATE_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    uint32_t bitrate;
    void* asyncIdentifier;
} PARTY_SET_CHAT_AUDIO_ENCODER_BITRATE_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CHAT_TEXT_RECEIVED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_CHAT_CONTROL_HANDLE senderChatControl;
    uint32_t receiverChatControlCount;
    _Field_size_(receiverChatControlCount) PARTY_CHAT_CONTROL_HANDLE* receiverChatControls;
    PartyString languageCode;
    PartyString chatText;
    uint32_t dataSize;
    _Field_size_bytes_(dataSize) const void* data;
    uint32_t translationCount;
    _Field_size_(translationCount) PARTY_TRANSLATION* translations;
    PARTY_CHAT_TEXT_RECEIVED_OPTIONS options;
    PartyString originalChatText;
    PartyError errorDetail;
} PARTY_CHAT_TEXT_RECEIVED_STATE_CHANGE;

typedef struct PARTY_VOICE_CHAT_TRANSCRIPTION_RECEIVED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE senderChatControl;
    uint32_t receiverChatControlCount;
    _Field_size_(receiverChatControlCount) PARTY_CHAT_CONTROL_HANDLE* receiverChatControls;
    PARTY_AUDIO_SOURCE_TYPE sourceType;
    PartyString languageCode;
    PartyString transcription;
    PARTY_VOICE_CHAT_TRANSCRIPTION_PHRASE_TYPE type;
    uint32_t translationCount;
    _Field_size_(translationCount) PARTY_TRANSLATION* translations;
} PARTY_VOICE_CHAT_TRANSCRIPTION_RECEIVED_STATE_CHANGE;

typedef struct PARTY_SET_CHAT_AUDIO_INPUT_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_AUDIO_DEVICE_SELECTION_TYPE audioDeviceSelectionType;
    PartyString audioDeviceSelectionContext;
    void* asyncIdentifier;
} PARTY_SET_CHAT_AUDIO_INPUT_COMPLETED_STATE_CHANGE;

typedef struct PARTY_SET_CHAT_AUDIO_OUTPUT_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_AUDIO_DEVICE_SELECTION_TYPE audioDeviceSelectionType;
    PartyString audioDeviceSelectionContext;
    void* asyncIdentifier;
} PARTY_SET_CHAT_AUDIO_OUTPUT_COMPLETED_STATE_CHANGE;

typedef struct PARTY_LOCAL_CHAT_AUDIO_INPUT_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_AUDIO_INPUT_STATE state;
    PartyError errorDetail;
} PARTY_LOCAL_CHAT_AUDIO_INPUT_CHANGED_STATE_CHANGE;

typedef struct PARTY_LOCAL_CHAT_AUDIO_OUTPUT_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_AUDIO_OUTPUT_STATE state;
    PartyError errorDetail;
} PARTY_LOCAL_CHAT_AUDIO_OUTPUT_CHANGED_STATE_CHANGE;

typedef struct PARTY_SET_TEXT_TO_SPEECH_PROFILE_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE type;
    PartyString profileIdentifier;
    void* asyncIdentifier;
} PARTY_SET_TEXT_TO_SPEECH_PROFILE_COMPLETED_STATE_CHANGE;

typedef struct PARTY_SYNTHESIZE_TEXT_TO_SPEECH_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE type;
    PartyString textToSynthesize;
    void* asyncIdentifier;
} PARTY_SYNTHESIZE_TEXT_TO_SPEECH_COMPLETED_STATE_CHANGE;

typedef struct PARTY_SET_LANGUAGE_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PartyString languageCode;
    void* asyncIdentifier;
} PARTY_SET_LANGUAGE_COMPLETED_STATE_CHANGE;

typedef struct PARTY_SET_TRANSCRIPTION_OPTIONS_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS options;
    void* asyncIdentifier;
} PARTY_SET_TRANSCRIPTION_OPTIONS_COMPLETED_STATE_CHANGE;

typedef struct PARTY_SET_TEXT_CHAT_OPTIONS_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_TEXT_CHAT_OPTIONS options;
    void* asyncIdentifier;
} PARTY_SET_TEXT_CHAT_OPTIONS_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CHAT_CONTROL_PROPERTIES_CHANGED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_CHAT_CONTROL_HANDLE chatControl;
    uint32_t propertyCount;
    _Field_size_(propertyCount) const PartyString* keys;
} PARTY_CHAT_CONTROL_PROPERTIES_CHANGED_STATE_CHANGE;

typedef struct PARTY_CHAT_CONTROL_JOINED_NETWORK_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_NETWORK_HANDLE network;
    PARTY_CHAT_CONTROL_HANDLE chatControl;
} PARTY_CHAT_CONTROL_JOINED_NETWORK_STATE_CHANGE;

typedef struct PARTY_CHAT_CONTROL_LEFT_NETWORK_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_DESTROYED_REASON reason;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_CHAT_CONTROL_HANDLE chatControl;
} PARTY_CHAT_CONTROL_LEFT_NETWORK_STATE_CHANGE;

typedef struct PARTY_CONNECT_CHAT_CONTROL_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    void* asyncIdentifier;
} PARTY_CONNECT_CHAT_CONTROL_COMPLETED_STATE_CHANGE;

typedef struct PARTY_DISCONNECT_CHAT_CONTROL_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_NETWORK_HANDLE network;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    void* asyncIdentifier;
} PARTY_DISCONNECT_CHAT_CONTROL_COMPLETED_STATE_CHANGE;

typedef struct PARTY_POPULATE_AVAILABLE_TEXT_TO_SPEECH_PROFILES_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    void* asyncIdentifier;
} PARTY_POPULATE_AVAILABLE_TEXT_TO_SPEECH_PROFILES_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CONFIGURE_AUDIO_MANIPULATION_VOICE_STREAM_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE chatControl;
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_CONFIGURATION* configuration;
    void* asyncIdentifier;
} PARTY_CONFIGURE_AUDIO_MANIPULATION_VOICE_STREAM_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CONFIGURE_AUDIO_MANIPULATION_CAPTURE_STREAM_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION* configuration;
    void* asyncIdentifier;
} PARTY_CONFIGURE_AUDIO_MANIPULATION_CAPTURE_STREAM_COMPLETED_STATE_CHANGE;

typedef struct PARTY_CONFIGURE_AUDIO_MANIPULATION_RENDER_STREAM_COMPLETED_STATE_CHANGE
{
    PARTY_STATE_CHANGE stateChange;
    PARTY_STATE_CHANGE_RESULT result;
    PartyError errorDetail;
    PARTY_CHAT_CONTROL_HANDLE localChatControl;
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION* configuration;
    void* asyncIdentifier;
} PARTY_CONFIGURE_AUDIO_MANIPULATION_RENDER_STREAM_COMPLETED_STATE_CHANGE;

typedef struct PARTY_PROFILING_METHOD_ENTRANCE_EVENT_DATA
{
    PartyString methodName;
} PARTY_PROFILING_METHOD_ENTRANCE_EVENT_DATA;

typedef struct PARTY_PROFILING_METHOD_EXIT_EVENT_DATA
{
    PartyString methodName;
} PARTY_PROFILING_METHOD_EXIT_EVENT_DATA;

// END GENERATED SECTION

#pragma pack(pop)

typedef
void
(PARTY_API* PARTY_PROFILING_METHOD_ENTRANCE_FUNC)(
    const PARTY_PROFILING_METHOD_ENTRANCE_EVENT_DATA* eventData
    );

typedef
void
(PARTY_API* PARTY_PROFILING_METHOD_EXIT_FUNC)(
    const PARTY_PROFILING_METHOD_EXIT_EVENT_DATA* eventData
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyLocalUserGetEntityId(
    PARTY_LOCAL_USER_HANDLE localUser,
    _Outptr_ PartyString* entityId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyLocalUserUpdateEntityToken(
    PARTY_LOCAL_USER_HANDLE localUser,
    PartyString titlePlayerEntityToken
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyLocalUserGetCustomContext(
    PARTY_LOCAL_USER_HANDLE localUser,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyLocalUserSetCustomContext(
    PARTY_LOCAL_USER_HANDLE localUser,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetLocalUser(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Outptr_result_maybenull_ PARTY_LOCAL_USER_HANDLE* localUser
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointSendMessage(
    PARTY_ENDPOINT_HANDLE endpoint,
    uint32_t targetEndpointCount,
    _In_reads_(targetEndpointCount) const PARTY_ENDPOINT_HANDLE* targetEndpoints,
    PARTY_SEND_MESSAGE_OPTIONS options,
    _In_opt_ const PARTY_SEND_MESSAGE_QUEUING_CONFIGURATION* queuingConfiguration,
    uint32_t dataBufferCount,
    _In_reads_(dataBufferCount) const PARTY_DATA_BUFFER* dataBuffers,
    _In_opt_ void* messageIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointCancelMessages(
    PARTY_ENDPOINT_HANDLE endpoint,
    uint32_t targetEndpointCount,
    _In_reads_(targetEndpointCount) const PARTY_ENDPOINT_HANDLE* targetEndpoints,
    PARTY_CANCEL_MESSAGES_FILTER_EXPRESSION filterExpression,
    uint32_t messageIdentityFilterMask,
    uint32_t filteredMessageIdentitiesToMatch,
    _Out_opt_ uint32_t* canceledMessagesCount
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointFlushMessages(
    PARTY_ENDPOINT_HANDLE endpoint,
    uint32_t targetEndpointCount,
    _In_reads_(targetEndpointCount) const PARTY_ENDPOINT_HANDLE* targetEndpoints
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetEndpointStatistics(
    PARTY_ENDPOINT_HANDLE endpoint,
    uint32_t targetEndpointCount,
    _In_reads_(targetEndpointCount) const PARTY_ENDPOINT_HANDLE* targetEndpoints,
    uint32_t statisticCount,
    _In_reads_(statisticCount) const PARTY_ENDPOINT_STATISTIC* statisticTypes,
    _Out_writes_all_(statisticCount) uint64_t* statisticValues
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointIsLocal(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Out_ PartyBool* isLocal
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetEntityId(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Outptr_result_maybenull_ PartyString* entityId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetNetwork(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Outptr_ PARTY_NETWORK_HANDLE* network
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetDevice(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Outptr_ PARTY_DEVICE_HANDLE* device
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetUniqueIdentifier(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Out_ uint16_t* uniqueIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetSharedProperty(
    PARTY_ENDPOINT_HANDLE endpoint,
    PartyString key,
    _Out_ PARTY_DATA_BUFFER* value
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetSharedPropertyKeys(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Out_ uint32_t* propertyCount,
    _Outptr_result_buffer_(*propertyCount) const PartyString** keys
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointSetSharedProperties(
    PARTY_ENDPOINT_HANDLE endpoint,
    uint32_t propertyCount,
    _In_reads_(propertyCount) const PartyString* keys,
    _In_reads_(propertyCount) const PARTY_DATA_BUFFER* values
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointGetCustomContext(
    PARTY_ENDPOINT_HANDLE endpoint,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyEndpointSetCustomContext(
    PARTY_ENDPOINT_HANDLE endpoint,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceCreateChatControl(
    PARTY_DEVICE_HANDLE device,
    PARTY_LOCAL_USER_HANDLE localUser,
    _In_opt_ PartyString languageCode,
    _In_opt_ void* asyncIdentifier,
    _Outptr_opt_ PARTY_CHAT_CONTROL_HANDLE* chatControl
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceDestroyChatControl(
    PARTY_DEVICE_HANDLE device,
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceIsLocal(
    PARTY_DEVICE_HANDLE device,
    _Out_ PartyBool* isLocal
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceGetChatControls(
    PARTY_DEVICE_HANDLE device,
    _Out_ uint32_t* chatControlCount,
    _Outptr_result_buffer_(*chatControlCount) const PARTY_CHAT_CONTROL_HANDLE** chatControls
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceGetSharedProperty(
    PARTY_DEVICE_HANDLE device,
    PartyString key,
    _Out_ PARTY_DATA_BUFFER* value
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceGetSharedPropertyKeys(
    PARTY_DEVICE_HANDLE device,
    _Out_ uint32_t* propertyCount,
    _Outptr_result_buffer_(*propertyCount) const PartyString** keys
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceSetSharedProperties(
    PARTY_DEVICE_HANDLE device,
    uint32_t propertyCount,
    _In_reads_(propertyCount) const PartyString* keys,
    _In_reads_(propertyCount) const PARTY_DATA_BUFFER* values
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceGetCustomContext(
     PARTY_DEVICE_HANDLE device,
     _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeviceSetCustomContext(
    PARTY_DEVICE_HANDLE device,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyInvitationGetCreatorEntityId(
    PARTY_INVITATION_HANDLE invitation,
    _Outptr_result_maybenull_ PartyString * entityId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyInvitationGetInvitationConfiguration(
    PARTY_INVITATION_HANDLE invitation,
    _Outptr_ const PARTY_INVITATION_CONFIGURATION ** configuration
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyInvitationGetCustomContext(
    PARTY_INVITATION_HANDLE invitation,
    _Outptr_result_maybenull_ void ** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyInvitationSetCustomContext(
    PARTY_INVITATION_HANDLE invitation,
    _In_opt_ void * customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkAuthenticateLocalUser(
    PARTY_NETWORK_HANDLE network,
    PARTY_LOCAL_USER_HANDLE localUser,
    PartyString invitationIdentifier,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkRemoveLocalUser(
    PARTY_NETWORK_HANDLE network,
    PARTY_LOCAL_USER_HANDLE localUser,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkCreateInvitation(
    PARTY_NETWORK_HANDLE network,
    PARTY_LOCAL_USER_HANDLE localUser,
    _In_opt_ const PARTY_INVITATION_CONFIGURATION* invitationConfiguration,
    void* asyncIdentifier,
    _Outptr_opt_ PARTY_INVITATION_HANDLE* invitation
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkRevokeInvitation(
    PARTY_NETWORK_HANDLE network,
    PARTY_LOCAL_USER_HANDLE localUser,
    PARTY_INVITATION_HANDLE invitation,
    void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetInvitations(
    PARTY_NETWORK_HANDLE network,
    _Out_ uint32_t* invitationCount,
    _Outptr_result_buffer_(*invitationCount) const PARTY_INVITATION_HANDLE** invitations
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkCreateEndpoint(
    PARTY_NETWORK_HANDLE network,
    _In_opt_ PARTY_LOCAL_USER_HANDLE localUser,
    uint32_t sharedPropertyCount,
    _In_reads_opt_(sharedPropertyCount) const PartyString* keys,
    _In_reads_opt_(sharedPropertyCount) const PARTY_DATA_BUFFER* values,
    _In_opt_ void* asyncIdentifier,
    _Outptr_opt_ PARTY_ENDPOINT_HANDLE* endpoint
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkDestroyEndpoint(
    PARTY_NETWORK_HANDLE network,
    PARTY_ENDPOINT_HANDLE localEndpoint,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkLeaveNetwork(
    PARTY_NETWORK_HANDLE network,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetEndpoints(
    PARTY_NETWORK_HANDLE network,
    _Out_ uint32_t* endpointCount,
    _Outptr_result_buffer_(*endpointCount) const PARTY_ENDPOINT_HANDLE** endpoints
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkFindEndpointByUniqueIdentifier(
    PARTY_NETWORK_HANDLE network,
    uint16_t uniqueIdentifier,
    _Outptr_ PARTY_ENDPOINT_HANDLE* endpoint
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetDevices(
    PARTY_NETWORK_HANDLE network,
    _Out_ uint32_t* deviceCount,
    _Outptr_result_buffer_(*deviceCount) const PARTY_DEVICE_HANDLE** devices
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetLocalUsers(
    PARTY_NETWORK_HANDLE network,
    _Out_ uint32_t* userCount,
    _Outptr_result_buffer_(*userCount) const PARTY_LOCAL_USER_HANDLE** users
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetNetworkDescriptor(
     PARTY_NETWORK_HANDLE network,
     _Out_ PARTY_NETWORK_DESCRIPTOR* networkDescriptor
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetNetworkConfiguration(
    PARTY_NETWORK_HANDLE network,
    _Outptr_ const PARTY_NETWORK_CONFIGURATION** networkConfiguration
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkKickDevice(
    PARTY_NETWORK_HANDLE network,
    PARTY_DEVICE_HANDLE targetDevice,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkKickUser(
    PARTY_NETWORK_HANDLE network,
    PartyString targetEntityId,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetSharedProperty(
    PARTY_NETWORK_HANDLE network,
    PartyString key,
    _Out_ PARTY_DATA_BUFFER* value
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetSharedPropertyKeys(
    PARTY_NETWORK_HANDLE network,
    _Out_ uint32_t* propertyCount,
    _Outptr_result_buffer_(*propertyCount) const PartyString** keys
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkSetSharedProperties(
    PARTY_NETWORK_HANDLE network,
    uint32_t propertyCount,
    _In_reads_(propertyCount) const PartyString* keys,
    _In_reads_(propertyCount) const PARTY_DATA_BUFFER* values
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkConnectChatControl(
    PARTY_NETWORK_HANDLE network,
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkDisconnectChatControl(
    PARTY_NETWORK_HANDLE network,
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetChatControls(
    PARTY_NETWORK_HANDLE network,
    _Out_ uint32_t* chatControlCount,
    _Outptr_result_buffer_(*chatControlCount) const PARTY_CHAT_CONTROL_HANDLE** chatControls
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetNetworkStatistics(
    PARTY_NETWORK_HANDLE network,
    uint32_t statisticCount,
    _In_reads_(statisticCount) const PARTY_NETWORK_STATISTIC* statisticTypes,
    _Out_writes_all_(statisticCount) uint64_t* statisticValues
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetCustomContext(
    PARTY_NETWORK_HANDLE network,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkSetCustomContext(
    PARTY_NETWORK_HANDLE network,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyNetworkGetDeviceConnectionType(
    PARTY_NETWORK_HANDLE network,
    PARTY_DEVICE_HANDLE targetDevice,
    _Out_ PARTY_DEVICE_CONNECTION_TYPE* deviceConnectionType
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetLocalUser(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PARTY_LOCAL_USER_HANDLE* localUser
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetPermissions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    PARTY_CHAT_PERMISSION_OPTIONS chatPermissionOptions
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetPermissions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    _Out_ PARTY_CHAT_PERMISSION_OPTIONS* chatPermissionOptions
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSendText(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    uint32_t targetChatControlCount,
    _In_reads_(targetChatControlCount) const PARTY_CHAT_CONTROL_HANDLE* targetChatControls,
    PartyString chatText,
    uint32_t dataBufferCount,
    _In_reads_(dataBufferCount) const PARTY_DATA_BUFFER* dataBuffers
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetAudioInput(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_AUDIO_DEVICE_SELECTION_TYPE audioDeviceSelectionType,
    _In_opt_ PartyString audioDeviceSelectionContext,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioInput(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PARTY_AUDIO_DEVICE_SELECTION_TYPE* audioDeviceSelectionType,
    _Outptr_ PartyString* audioDeviceSelectionContext,
    _Outptr_ PartyString* deviceId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetAudioOutput(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_AUDIO_DEVICE_SELECTION_TYPE audioDeviceSelectionType,
    _In_opt_ PartyString audioDeviceSelectionContext,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioOutput(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PARTY_AUDIO_DEVICE_SELECTION_TYPE* audioDeviceSelectionType,
    _Outptr_ PartyString* audioDeviceSelectionContext,
    _Outptr_ PartyString* deviceId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlPopulateAvailableTextToSpeechProfiles(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAvailableTextToSpeechProfiles(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ uint32_t* profileCount,
    _Outptr_result_buffer_(*profileCount) const PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE** profiles
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetTextToSpeechProfile(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE type,
    _In_opt_ PartyString profileIdentifier,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetTextToSpeechProfile(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE type,
    _Outptr_result_maybenull_ PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE* profile
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSynthesizeTextToSpeech(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_SYNTHESIZE_TEXT_TO_SPEECH_TYPE type,
    PartyString textToSynthesize,
    _In_opt_ void * asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetLanguage(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ PartyString languageCode,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetLanguage(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PartyString* languageCode
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetTranscriptionOptions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS options,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetTranscriptionOptions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PARTY_VOICE_CHAT_TRANSCRIPTION_OPTIONS* options
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetTextChatOptions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_TEXT_CHAT_OPTIONS options,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetTextChatOptions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PARTY_TEXT_CHAT_OPTIONS* options
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetAudioRenderVolume(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    float volume
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioRenderVolume(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    _Out_ float* volume
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetAudioInputMuted(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PartyBool muted
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioInputMuted(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PartyBool* muted
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetIncomingAudioMuted(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    PartyBool muted
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetIncomingAudioMuted(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    _Out_ PartyBool* muted
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetIncomingTextMuted(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    PartyBool muted
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetIncomingTextMuted(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    _Out_ PartyBool* muted
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetVoiceAudioOptions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_VOICE_AUDIO_OPTIONS options
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetVoiceAudioOptions(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PARTY_VOICE_AUDIO_OPTIONS* options
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetLocalChatIndicator(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PARTY_LOCAL_CHAT_CONTROL_CHAT_INDICATOR* chatIndicator
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetChatIndicator(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PARTY_CHAT_CONTROL_HANDLE targetChatControl,
    _Out_ PARTY_CHAT_CONTROL_CHAT_INDICATOR* chatIndicator
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetAudioEncoderBitrate(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    uint32_t bitrate,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioEncoderBitrate(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ uint32_t* bitrate
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlIsLocal(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ PartyBool* isLocal
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetDevice(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PARTY_DEVICE_HANDLE* device
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetEntityId(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PartyString* entityId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetSharedProperty(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    PartyString key,
    _Out_ PARTY_DATA_BUFFER* value
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetSharedPropertyKeys(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ uint32_t* propertyCount,
    _Outptr_result_buffer_(*propertyCount) const PartyString** keys
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetSharedProperties(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    uint32_t propertyCount,
    _In_reads_(propertyCount) const PartyString* keys,
    _In_reads_(propertyCount) const PARTY_DATA_BUFFER* values
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetNetworks(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Out_ uint32_t* networkCount,
    _Outptr_result_buffer_(*networkCount) const PARTY_NETWORK_HANDLE** networks
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlSetCustomContext(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetCustomContext(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlConfigureAudioManipulationVoiceStream(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_CONFIGURATION* configuration,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioManipulationVoiceStream(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE* stream
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlConfigureAudioManipulationCaptureStream(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION* configuration,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioManipulationCaptureStream(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE* stream
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlConfigureAudioManipulationRenderStream(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _In_opt_ PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION* configuration,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyChatControlGetAudioManipulationRenderStream(
    PARTY_CHAT_CONTROL_HANDLE chatControl,
    _Outptr_ PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE* stream
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyTextToSpeechProfileGetIdentifier(
    PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE profile,
    _Outptr_ PartyString* identifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyTextToSpeechProfileGetName(
    PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE profile,
    _Outptr_ PartyString* name
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyTextToSpeechProfileGetLanguageCode(
    PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE profile,
    _Outptr_ PartyString* languageCode
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyTextToSpeechProfileGetGender(
    PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE profile,
    _Out_ PARTY_GENDER* gender
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyTextToSpeechProfileGetCustomContext(
    PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE profile,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyTextToSpeechProfileSetCustomContext(
    PARTY_TEXT_TO_SPEECH_PROFILE_HANDLE profile,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamGetConfiguration(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _Out_ PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_CONFIGURATION * configuration
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamGetFormat(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _Out_ PARTY_AUDIO_FORMAT * format
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamGetAvailableBufferCount(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _Out_ uint32_t* count
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamGetNextBuffer(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _Out_ PARTY_MUTABLE_DATA_BUFFER* buffer
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamReturnBuffer(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _Post_invalid_ void * buffer
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamGetCustomContext(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSourceStreamSetCustomContext(
    PARTY_AUDIO_MANIPULATION_SOURCE_STREAM_HANDLE stream,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSinkStreamGetConfiguration(
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE stream,
    _Out_ PARTY_AUDIO_MANIPULATION_SINK_STREAM_CONFIGURATION * configuration
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSinkStreamGetFormat(
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE stream,
    _Out_ PARTY_AUDIO_FORMAT* format
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSinkStreamSubmitBuffer(
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE stream,
    const PARTY_DATA_BUFFER* buffer
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSinkStreamGetCustomContext(
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE stream,
    _Outptr_result_maybenull_ void** customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyAudioManipulationSinkStreamSetCustomContext(
    PARTY_AUDIO_MANIPULATION_SINK_STREAM_HANDLE stream,
    _In_opt_ void* customContext
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySetOption(
    _In_opt_ void* object,
    PARTY_OPTION option,
    _In_opt_ const void* value
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetOption(
    _In_opt_ const void* object,
    PARTY_OPTION option,
    _Out_ void* value
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetErrorMessage(
    PartyError error,
    _Outptr_ PartyString* errorMessage
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySerializeNetworkDescriptor(
    const PARTY_NETWORK_DESCRIPTOR* networkDescriptor,
    _Out_writes_z_(PARTY_MAX_SERIALIZED_NETWORK_DESCRIPTOR_STRING_LENGTH + 1) char* serializedNetworkDescriptorString
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDeserializeNetworkDescriptor(
    PartyString serializedNetworkDescriptorString,
    _Out_ PARTY_NETWORK_DESCRIPTOR* networkDescriptor
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySetMemoryCallbacks(
    _In_ PARTY_MEM_ALLOC_FUNC allocateMemoryCallback,
    _In_ PARTY_MEM_FREE_FUNC freeMemoryCallback
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetMemoryCallbacks(
    _Out_ PARTY_MEM_ALLOC_FUNC* allocateMemoryCallback,
    _Out_ PARTY_MEM_FREE_FUNC* freeMemoryCallback
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySetProfilingCallbacksForMethodEntryExit(
    _In_opt_ PARTY_PROFILING_METHOD_ENTRANCE_FUNC profilingMethodEntranceCallback,
    _In_opt_ PARTY_PROFILING_METHOD_EXIT_FUNC profilingMethodExitCallback
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetProfilingCallbacksForMethodEntryExit(
    _Outptr_result_maybenull_ PARTY_PROFILING_METHOD_ENTRANCE_FUNC* profilingMethodEntranceCallback,
    _Outptr_result_maybenull_ PARTY_PROFILING_METHOD_EXIT_FUNC* profilingMethodExitCallback
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySetThreadAffinityMask(
    PARTY_THREAD_ID threadId,
    uint64_t threadAffinityMask
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetThreadAffinityMask(
    PARTY_THREAD_ID threadId,
    _Out_ uint64_t* threadAffinityMask
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySetWorkMode(
    PARTY_THREAD_ID threadId,
    PARTY_WORK_MODE workMode
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetWorkMode(
    PARTY_THREAD_ID threadId,
    _Out_ PARTY_WORK_MODE * workMode
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyInitialize(
    PartyString titleId,
    _Outptr_ PARTY_HANDLE* handle
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyCleanup(
    _Post_invalid_ PARTY_HANDLE handle
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyStartProcessingStateChanges(
    PARTY_HANDLE handle,
    _Out_ uint32_t* stateChangeCount,
    _Outptr_result_buffer_(*stateChangeCount) const PARTY_STATE_CHANGE*const** stateChanges
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyFinishProcessingStateChanges(
    PARTY_HANDLE handle,
    uint32_t stateChangeCount,
    _In_reads_(stateChangeCount) const PARTY_STATE_CHANGE*const* stateChanges
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDoWork(
    PARTY_HANDLE handle,
    PARTY_THREAD_ID threadId
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetRegions(
    PARTY_HANDLE handle,
    _Out_ uint32_t* regionListCount,
    _Outptr_result_buffer_(*regionListCount) const PARTY_REGION** regionList
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyCreateNewNetwork(
    PARTY_HANDLE handle,
    PARTY_LOCAL_USER_HANDLE localUser,
    const PARTY_NETWORK_CONFIGURATION* networkConfiguration,
    uint32_t regionCount,
    _In_reads_(regionCount) const PARTY_REGION* regions,
    _In_opt_ const PARTY_INVITATION_CONFIGURATION* initialInvitationConfiguration,
    _In_opt_ void * asyncIdentifier,
    _Out_opt_ PARTY_NETWORK_DESCRIPTOR* networkDescriptor,
    _Out_writes_opt_z_(PARTY_MAX_INVITATION_IDENTIFIER_STRING_LENGTH + 1) char * appliedInitialInvitationIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyConnectToNetwork(
    PARTY_HANDLE handle,
    const PARTY_NETWORK_DESCRIPTOR* networkDescriptor,
    _In_opt_ void* asyncIdentifier,
    _Outptr_opt_ PARTY_NETWORK_HANDLE* network
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartySynchronizeMessagesBetweenEndpoints(
    PARTY_HANDLE handle,
    uint32_t endpointCount,
    _In_reads_(endpointCount) const PARTY_ENDPOINT_HANDLE* endpoints,
    PARTY_SYNCHRONIZE_MESSAGES_BETWEEN_ENDPOINTS_OPTIONS options,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetLocalDevice(
    PARTY_HANDLE handle,
    _Outptr_ PARTY_DEVICE_HANDLE* localDevice
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyCreateLocalUser(
    PARTY_HANDLE handle,
    PartyString entityId,
    PartyString titlePlayerEntityToken,
    _Outptr_ PARTY_LOCAL_USER_HANDLE* localUser
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyDestroyLocalUser(
    PARTY_HANDLE handle,
    PARTY_LOCAL_USER_HANDLE localUser,
    _In_opt_ void* asyncIdentifier
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetLocalUsers(
    PARTY_HANDLE handle,
    _Out_ uint32_t* userCount,
    _Outptr_result_buffer_(*userCount) const PARTY_LOCAL_USER_HANDLE** users
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetNetworks(
    PARTY_HANDLE handle,
    _Out_ uint32_t* networkCount,
    _Outptr_result_buffer_(*networkCount) const PARTY_NETWORK_HANDLE** networks
    );

PARTY_API_ATTRIBUTES
PartyError
PARTY_API
PartyGetChatControls(
    PARTY_HANDLE handle,
    _Out_ uint32_t* chatControlCount,
    _Outptr_result_buffer_(*chatControlCount) const PARTY_CHAT_CONTROL_HANDLE** chatControls
    );

#ifdef __cplusplus
}
#endif
